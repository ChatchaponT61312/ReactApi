import { Entity } from "../../core/util/Entity";
import { Sprite } from "../../core/render/Sprite";
import { Container } from "../../core/render/Container";
import * as $type from "../../core/util/Type";
import * as $array from "../../core/util/Array";
import classes from "./Classes";
function isJson(value) {
    return $type.isObject(value) && !$type.isArray(value) && $type.isString(value.name);
}
var JsonParser = /** @class */ (function () {
    function JsonParser() {
    }
    Object.defineProperty(JsonParser.prototype, "parse", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root, object) {
            var _this = this;
            if (isJson(object)) {
                var construct = classes[object.name];
                if (!construct) {
                    throw new Error("Could not find class `" + object.name + "`");
                }
                var entity_1 = construct.new(root, object.settings);
                if (entity_1 instanceof Entity) {
                    if (object.adapters) {
                        $array.each(object.adapters, function (adapter) {
                            entity_1.adapters.add(adapter.key, adapter.callback);
                        });
                    }
                }
                if (entity_1 instanceof Container) {
                    if (object.children) {
                        $array.each(object.children, function (child) {
                            var sprite = _this.parse(root, child);
                            if (!(sprite instanceof Sprite)) {
                                throw new Error("Children must be Sprite");
                            }
                            entity_1.children.push(sprite);
                        });
                    }
                }
                return entity_1;
            }
            else {
                throw new Error("JsonParser.parse requires an object which has a `name` property");
            }
        }
    });
    Object.defineProperty(JsonParser.prototype, "parseString", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root, string) {
            return this.parse(root, JSON.parse(string));
        }
    });
    return JsonParser;
}());
export { JsonParser };
//# sourceMappingURL=Json.js.map