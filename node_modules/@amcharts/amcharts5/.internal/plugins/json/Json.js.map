{"version":3,"file":"Json.js","sourceRoot":"","sources":["../../../../../src/.internal/plugins/json/Json.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,6BAA6B,CAAC;AAExD,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAC9C,OAAO,KAAK,MAAM,MAAM,uBAAuB,CAAC;AAGhD,OAAO,OAAO,MAAM,WAAW,CAAC;AAYhC,SAAS,MAAM,CAAC,KAAU;IACtB,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAE,KAAa,CAAC,IAAI,CAAC,CAAC;AACjG,CAAC;AAED;IAAA;IA0CA,CAAC;;;;;eAzCG,UAA0B,IAAU,EAAE,MAAe;YAArD,iBAoCC;YAnCG,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;gBAChB,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAQ,CAAC;gBAC9C,IAAI,CAAC,SAAS,EAAE;oBACZ,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;iBACjE;gBAED,IAAM,QAAM,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAM,CAAC;gBAEzD,IAAI,QAAM,YAAY,MAAM,EAAE;oBAC1B,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAA8B,EAAE,UAAC,OAAO;4BACvD,QAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;wBACvD,CAAC,CAAC,CAAC;qBACN;iBACJ;gBAED,IAAI,QAAM,YAAY,SAAS,EAAE;oBAC7B,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAwB,EAAE,UAAC,KAAK;4BAC/C,IAAM,MAAM,GAAG,KAAI,CAAC,KAAK,CAAS,IAAI,EAAE,KAAK,CAAC,CAAC;4BAE/C,IAAI,CAAC,CAAC,MAAM,YAAY,MAAM,CAAC,EAAE;gCAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;6BAC9C;4BAED,QAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACjC,CAAC,CAAC,CAAC;qBACN;iBACJ;gBAED,OAAO,QAAM,CAAC;aAEjB;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;aACtF;QACL,CAAC;;;;;;eAED,UAAgC,IAAU,EAAE,MAAc;YACtD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,CAAC;;IACL,iBAAC;AAAD,CAAC,AA1CD,IA0CC","sourcesContent":["import type { Root } from \"../../core/Root\";\nimport type { Settings } from \"../../core/util/Entity\";\nimport { Entity } from \"../../core/util/Entity\";\nimport { Sprite } from \"../../core/render/Sprite\";\nimport { Container } from \"../../core/render/Container\";\n\nimport * as $type from \"../../core/util/Type\";\nimport * as $array from \"../../core/util/Array\";\n\nimport type { IClasses } from \"./Classes\";\nimport classes from \"./Classes\";\n\ninterface IAdapter<E extends Settings> {\n    key: keyof E[\"_settings\"],\n    callback: (value: E[\"_settings\"][this[\"key\"]], target: E, key: this[\"key\"]) => E[\"_settings\"][this[\"key\"]];\n}\n\ninterface IJson {\n    name: keyof IClasses;\n    [key: string]: unknown;\n}\n\nfunction isJson(value: any): value is IJson {\n    return $type.isObject(value) && !$type.isArray(value) && $type.isString((value as any).name);\n}\n\nexport class JsonParser {\n    parse<E extends Settings>(root: Root, object: unknown): E {\n        if (isJson(object)) {\n            const construct = classes[object.name] as any;\n            if (!construct) {\n                throw new Error(\"Could not find class `\" + object.name + \"`\");\n            }\n\n            const entity = construct.new(root, object.settings) as E;\n\n            if (entity instanceof Entity) {\n                if (object.adapters) {\n                    $array.each(object.adapters as Array<IAdapter<E>>, (adapter) => {\n                        entity.adapters.add(adapter.key, adapter.callback);\n                    });\n                }\n            }\n\n            if (entity instanceof Container) {\n                if (object.children) {\n                    $array.each(object.children as Array<IJson>, (child) => {\n                        const sprite = this.parse<Sprite>(root, child);\n\n                        if (!(sprite instanceof Sprite)) {\n                            throw new Error(\"Children must be Sprite\");\n                        }\n\n                        entity.children.push(sprite);\n                    });\n                }\n            }\n\n            return entity;\n\n        } else {\n            throw new Error(\"JsonParser.parse requires an object which has a `name` property\");\n        }\n    }\n\n    parseString<E extends Settings>(root: Root, string: string): E {\n        return this.parse(root, JSON.parse(string));\n    }\n}\n"]}